/* vim: ft=dts
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
// From dhruvinsh
#include <behaviors/num_word.dtsi>

#define L_QWERTY  0
#define L_NUMS    1
#define L_FUNC    2
#define L_SPECIAL 3
#define L_SYSTEM  4
#define L_VIM     5
//#define L_SFT_VIM 6
//#define L_VIM_VIS 7
#define L_SYMBOLS 6

&num_word {
    layers = <L_NUMS>;
};
//TODO Look at setting up the thumb keys and layers
//https://imgur.com/a/corne-crkbd-layout-DKzQ9TL
//https://github.com/manna-harbour/miryoku/tree/master/docs/reference
//https://precondition.github.io/home-row-mods#tap-hold-configuration-settings

/* Template

  layer_name{
    bindings = <
      &trans &trans &trans &trans &trans &trans           &trans &trans &trans &trans &trans &trans 
      &trans &trans &trans &trans &trans &trans           &trans &trans &trans &trans &trans &trans 
      &trans &trans &trans &trans &trans &trans           &trans &trans &trans &trans &trans &trans  
                           &trans &trans &trans           &trans &trans &trans  
    >;
  };



 */
 
{
        keymap {
                compatible = "zmk,keymap";

        l_qwerty {
            bindings = <
&kp TAB         &kp Y        &kp C         &kp L            &kp M        &kp K        &kp Z   &kp F         &kp U           &kp APOS        &kp AMPS        &kp GRAVE
&kp AT        &hrm LCTRL I &hrm LALT S   &hrm LSHFT R     &hrm LGUI T   &kp G       &kp P   &hrm RGUI N   &hrm RSHFT E    &hrm RALT A     &hrm RCTRL O     &kp SEMI
&kp TILDE      &kp Q &kp V  &kp W         &kp D            &kp J                    &kp B   &lt L_VIM H   &kp COMMA       &lt L_NUMS DOT  &hrm RCTRL X     &kp SLASH
                            &lt L_SPECIAL ESC &lt L_FUNC BSPC &lt L_SYMBOLS ENTER   &lt L_NUMS TAB &lt L_VIM SPACE &lt L_SYSTEM DEL
            >;
        };


        l_nums {
            bindings = <
&trans    &trans     &trans    &trans     &kp PLUS  &kp STAR        &trans  &kp N7   &kp N8   &kp N9   &trans   &trans 
&trans    &kp LCTRL  &kp LALT  &kp LSHFT  &kp LGUI  &kp EQUAL       &kp N0  &kp N4   &kp N5   &kp N6   &kp DOT   &trans
&trans    &trans     &trans    &trans     &kp MINUS &kp SLASH       &trans  &kp N1   &kp N2   &kp N3   &trans     &trans
                                &trans   &trans &trans            &trans      &trans   &trans
            >;
        };

        l_func {
            bindings = <
                // TODO add special functions like locks etc.
&trans    &trans &trans &trans     &trans   &trans     &trans   &trans   &trans   &trans &trans  &trans
&kp CLCK  &kp F1 &kp F2 &kp F3     &kp F4   &kp F5     &kp F6   &kp F7   &kp F8   &kp F9 &kp F10 &kp F11
&trans    &trans &trans &trans     &trans   &trans     &trans   &trans   &trans   &trans &trans  &kp F12
                        &kp LCTRL  &kp LGUI &kp LALT   &trans   &trans   &trans
            >;
        };

        l_special {
            bindings = <
// &trans          &to L_QWERTY  &to L_COLEMAK  &trans         &trans         &kp SLEP        &bootloader  &trans  &trans  &trans  &kp PSCRN  &sys_reset
&kp ESC         &trans        &kp HOME       &kp UP       &kp END        &bootloader     &bootloader  &kp HOME &kp UP   &kp END  &trans    &tog L_SPECIAL
&kp CLCK   &trans        &kp LEFT       &kp DOWN     &kp RIGHT      &kp PG_UP       &kp PG_UP    &kp LEFT &kp DOWN &kp RIGHT &trans   &sl L_SYSTEM
&sys_reset      &trans        &mkp RCLK      &mkp MCLK    &mkp LCLK      &kp PG_DN       &kp PG_DN    &kp RALT &kp RGUI &kp RCTRL &trans   &sys_reset 
                                             &trans       &trans         &trans          &trans       &trans   &trans
                                            // &ht C_VOL_DN C_MUTE   &kp C_VOL_UP
                                            // &kp C_PREV     &kp C_PP C_NEXT
            >;
        };

        l_system {
            bindings = <
&out OUT_BLE &to L_QWERTY  &to L_COLEMAK &trans         &trans        &bootloader      &bootloader    &trans        &trans        &trans        &trans  &trans
&out OUT_TOG &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3  &bt BT_SEL 4     &trans         &bt BT_SEL 5  &bt BT_SEL 6  &bt BT_SEL 7  &trans  &trans
&out OUT_USB &bt BT_DISC 0 &bt BT_DISC 1 &bt BT_DISC 2  &bt BT_DISC 3 &bt BT_DISC 4    &bt BT_CLR_ALL &bt BT_DISC 5 &bt BT_DISC 6 &bt BT_DISC 7 &trans  &bt BT_CLR
                                         &trans         &trans        &trans           &trans         &trans        &trans
            >;
        };

/*         l_vim { */
/*     bindings = < */
/* &trans        &trans      &kp LC(RIGHT) &paste_dn  &kp END        &td_vim_gg      &kp DOWN        &kp RIGHT  &kp LC(Z)     &kp LC(C)     &kp HOME       &tog L_VIM */
/* &trans        &kp END     &kp BSPC      &trans     &trans         &kp LC(X)       &kp LEFT        &trans     &kp LC(RIGHT) &tog L_VIM    &newline_after &trans */
/* &mo L_SFT_VIM &trans      &kp DEL       &kp LC(X)  &tog L_VIM_VIS &kp LC(LEFT)    &kp UP          &trans     &trans        &trans        &kp LC(E)      &mo L_SFT_VIM */
/*                                         &trans     &trans         &mo L_SFT_VIM   &trans          &trans     &trans */
/*             >; */
/*         }; */

  l_vim{
    bindings = <
      &trans &trans &trans &trans &trans &trans           &first_char &kp CARET    &trans &trans &trans &trans 
      &trans &trans &trans &trans &trans &trans           &kp H       &kp J  &kp K  &kp L  &trans &trans 
      &trans &trans &trans &trans &trans &trans           &trans      &trans &trans &trans &trans &trans  
                           &trans &trans &trans           &trans &trans &trans  
    >;
  };


/*         l_sft_vim { */
/*                         bindings = < */
/* // &trans  &trans  &trans  &trans  &kp END &trans        &kp HOME &trans  &trans  &trans  &trans  &trans */
/* &trans   &trans  &trans   &paste_up  &kp LS(END)  &kp LC(END)   &trans   &trans  &trans  &yank_eol    &trans         &trans */
/* &trans   &kp END &trans   &trans     &trans       &cut_eol      &trans   &trans  &trans  &kp HOME     &newline_up    &trans */
/* &trans   &trans  &kp BSPC &trans     &select_line &trans        &trans   &trans  &trans  &trans       &trans         &trans */
/*                           &trans     &trans       &trans        &trans   &trans  &trans */
/*                         >; */
/*                 }; */

/*         l_vim_vis { */
/*                         bindings = < */
/* // &tog L_VIM_VIS &trans  &trans  &trans  &kp LS(END) &trans        &kp LS(HOME) &trans  &trans  &trans  &kp LS(HOME) &trans */
/* &tog L_VIM_VIS  &trans  &kp LC(LS(RIGHT)) &trans  &kp LS(END)          &kp LS(LC(END))  &kp LS(DOWN) &kp LS(RIGHT) &kp LC(Z)         &kp LC(C) &trans  &trans */
/* &trans          &trans  &trans            &trans  &trans            &kp LC(X)        &kp LS(LEFT) &trans        &kp LC(LS(RIGHT)) &trans  &trans  &trans */
/* &trans          &trans  &kp BSPC          &trans  &tog L_VIM_VIS    &kp LC(LS(LEFT)) &kp LS(UP)   &trans        &kp LS(TAB)       &kp TAB &trans  &trans */
/*                                           &trans  &trans  &trans        &trans   &trans  &trans */
/*             >; */
/*         }; */

};


    caps_Word: prog_caps {
        compatible = "zmk,behavior-caps-word";
        #binding-cells = <0>;
        continue-list = <UNDERSCORE>;
    };

    // Tap for caps_Word, hold for caps lock
    caps_ht: caps_lock_word_ht {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        bindings = <&caps_Word>, <&kp>;
    };

    combos {
        compatible = "zmk,combos";
        combo_ctrlshift {
            timeout-ms = <150>;
            key-positions = <12 24>;
            bindings = <&kp LC(LSHIFT)>;
        };
    };

    macros {

      last_char: last_char{
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <100>;
        bindings = <&kp G &kp UNDERSCORE>;
      };
        newline_after: newline_after {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            bindings = <&kp END &kp ENTER>;
        };

        paste_up: paste_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            bindings = <&kp HOME &kp LC(V) &kp ENTER>;
        };

        paste_dn: paste_dn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            bindings = <&kp END &kp ENTER &kp LC(V)>;
        };

        cut_eol: cut_eol {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            bindings = <&kp LS(END) &kp LC(X)>;
        };

        select_line: select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            bindings = <&kp HOME &kp LS(END)>;
        };

        yank_eol: yank_eol {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            bindings = <&kp LS(END) &kp LC(C)>;
        };

        newline_up: newline_up {
            compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>;
            wait-ms = <100>;
            bindings = <&kp HOME &kp ENTER &kp LEFT>;
        };

    };

    behaviors {
        hrm: home_row_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <180>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <145>;
            bindings = <&kp>, <&kp>;
            // Trigger instantly for tab, escape thumb key (esp useful for esc_gr), shifts/brackets
            hold-trigger-key-positions = <0 36 24 35>;
            hold-trigger-on-release;
        };

        lt: layer_tap {
            // compatible = "zmk,behavior-hold-tap";
            // #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <160>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <145>;
            // bindinggs = <&kp>, <&mo>;
        };

        td_vim_gg: tap_dance_vim_gg {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&kp LC(HOME)>;
        };

        // Modify gresc to just use right shift for tilde, alt for grave, rgui for gui+grave.
        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_RSFT|MOD_RALT|MOD_RGUI)>;
            keep-mods = <(MOD_RSFT|MOD_RGUI)>;
        };

        del_bspc: shift_del_bspc {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DEL>, <&kp BSPC>;
            mods = <(MOD_RSFT)>;
        };
    };
};
